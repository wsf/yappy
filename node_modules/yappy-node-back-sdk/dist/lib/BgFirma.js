"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _constants=require("../constants/constants"),_axios=_interopRequireDefault(require("axios")),_crypto=_interopRequireDefault(require("crypto")),_errors=require("../constants/errors");function _interopRequireDefault(a){return a&&a.__esModule?a:{default:a}}function ownKeys(a,b){var c=Object.keys(a);if(Object.getOwnPropertySymbols){var d=Object.getOwnPropertySymbols(a);b&&(d=d.filter(function(b){return Object.getOwnPropertyDescriptor(a,b).enumerable})),c.push.apply(c,d)}return c}function _objectSpread(a){for(var b,c=1;c<arguments.length;c++)b=null==arguments[c]?{}:arguments[c],c%2?ownKeys(Object(b),!0).forEach(function(c){_defineProperty(a,c,b[c])}):Object.getOwnPropertyDescriptors?Object.defineProperties(a,Object.getOwnPropertyDescriptors(b)):ownKeys(Object(b)).forEach(function(c){Object.defineProperty(a,c,Object.getOwnPropertyDescriptor(b,c))});return a}function _defineProperty(a,b,c){return b in a?Object.defineProperty(a,b,{value:c,enumerable:!0,configurable:!0,writable:!0}):a[b]=c,a}class BgFirma{constructor(a,b,c,d,e){_defineProperty(this,"total",void 0),_defineProperty(this,"merchantId",void 0),_defineProperty(this,"currency",void 0),_defineProperty(this,"subtotal",void 0),_defineProperty(this,"taxes",void 0),_defineProperty(this,"shipping",void 0),_defineProperty(this,"discount",void 0),_defineProperty(this,"donation",void 0),_defineProperty(this,"paymentDate",void 0),_defineProperty(this,"paymentMethod",void 0),_defineProperty(this,"transactionType",void 0),_defineProperty(this,"orderId",void 0),_defineProperty(this,"successUrl",void 0),_defineProperty(this,"failUrl",void 0),_defineProperty(this,"domain",void 0),_defineProperty(this,"secretToken",void 0),_defineProperty(this,"sandbox",void 0),_defineProperty(this,"ssl",void 0),_defineProperty(this,"jwtToken",void 0),_defineProperty(this,"tel",void 0),a.shipping||(a.shipping=0 .toFixed(2)),a.discount||(a.discount=0 .toFixed(2)),a.currency||(this.currency="USD"),Object.assign(this,a),this.merchantId=b,this.secretToken=c,this.jwtToken=d,this.paymentDate=e,this.paymentMethod="YAP",this.transactionType="VEN",this.ssl=this.isSecure(),this.sandbox=this.sandbox?this.sandbox:!this.ssl}/**
   *
   * @param merchantId Client merchant ID
   * @param secretKey Client secretKey aka secretToken
   * @param domain  The domain of your shop.
   * @returns asynchronously if the checking was succesfull.
   * @description Check if the shop (client) meets the requirements to execute this sdk.
   */static async checkCredentials(a,b,c){try{if(!_constants.DOMAIN_REGEX.test(c)||64<c.length)return{success:!1,error:_objectSpread({},_errors.INVALID_DOMAIN)};const d=BgFirma.decodeSecret(b),e={method:"post",headers:{"x-api-key":d[1],"Content-Type":"application/json"},timeout:3e4},f=await _axios.default.post(_constants.APIURL+"/validateapikeymerchand",{merchantId:a,urlDomain:c},e);if("undefined"!=typeof f.data.unixTimestamp&&f.data.hasOwnProperty("unixTimestamp"))f.data.unixTimestamp*=1e3;else return{success:!1,error:_objectSpread({},_errors.INVALID_CREDENTIALS)};return f.data}catch(a){return{success:!1,error:_objectSpread({},_errors.GENERIC_ERROR)}}}/**
   *
   * @param secretKey  Your Secret Key (base64).
   * @description Decodes the secretToken into a readable string.
   * @returns An array with secret strings.
   */static decodeSecret(a){const b=Buffer.from(a,"base64").toString(),c=b.split(".");return c}validateNumbers(a){if(a){const b=a.toString();if(!a||0>parseFloat(b)||!/^\d+(\.\d{1,2})?$/.test(b))return!1}else return!1;return!0}parseNumericValues(){"string"==typeof this.subtotal&&(this.subtotal=parseFloat(this.subtotal)),"string"==typeof this.taxes&&(this.taxes=parseFloat(this.taxes)),"string"==typeof this.discount&&(this.discount=parseFloat(this.discount)),"string"==typeof this.total&&(this.total=parseFloat(this.total)),"string"==typeof this.shipping&&(this.shipping=parseFloat(this.shipping))}/**
   * @description Creates the signature
   * @returns url to redirect to minisitio and complete the order
   */createHash(){try{if(!this.validateNumbers(this.subtotal))return{success:!1,error:_errors.INVALID_SUBTOTAL};if(!this.validateNumbers(this.total))return{success:!1,error:_errors.INVALID_TOTAL};if(!this.validateNumbers(this.taxes))return{success:!1,error:_errors.INVALID_TAX};if(!this.validateNumbers(this.shipping))return{success:!1,error:_errors.INVALID_SHIPPING};if(!this.validateNumbers(this.discount))return{success:!1,error:_errors.INVALID_DISCOUNT};if(this.parseNumericValues(),(this.subtotal+this.taxes).toFixed(2)!==this.total.toFixed(2))return{success:!1,error:_objectSpread({},_errors.TOTAL_ERROR)};const a=BgFirma.decodeSecret(this.secretToken),b=_crypto.default.createHmac(_constants.HASH,a[0]).update(Buffer.from(this.concatElements(),"utf-8")).digest("hex").toString(),c={merchantId:this.merchantId,total:this.total.toFixed(2),subtotal:this.subtotal.toFixed(2),taxes:this.taxes.toFixed(2),shipping:this.shipping.toFixed(2),discount:this.discount.toFixed(2),donation:this.donation?"yes":"no",paymentDate:this.paymentDate,paymentMethod:this.paymentMethod,transactionType:this.transactionType,orderId:this.orderId,successUrl:this.successUrl,failUrl:this.failUrl,domain:this.domain,jwtToken:this.jwtToken,cancelUrl:this.failUrl,platform:"desarrollopropionode",signature:b,sbx:this.sandbox?"yes":"no",tel:BgFirma.validatePhone(this.tel)};let d=new URLSearchParams;return Object.keys(c).forEach(a=>{d.append(a,c[a].toString())}),{success:!0,url:encodeURI(`${_constants.URLSITE}?${new URLSearchParams(d)}`)}}catch(a){return{success:!1,error:_errors.GENERIC_ERROR}}}/**
   * @description Validates if the domain is secure or not
   */isSecure(){return!!_constants.DOMAIN_REGEX.test(this.domain)}/**
   * @description Create the string for the signature
   * @returns  string for the signature
   */concatElements(){return`${this.total.toFixed(2)}${this.merchantId}${this.subtotal.toFixed(2)}${this.taxes.toFixed(2)}${this.paymentDate}${this.paymentMethod}${this.transactionType}${this.orderId}${this.successUrl}${this.failUrl}${this.domain}`}/**
   *@abstract Validates the phone number before sending it to "minisitio".
   * @param tel Phone number.
   * @returns phone number without especial character | empty string.
   */static validatePhone(a){return a=a.replace(/\D/g,""),8===a.length&&"6"===a[0]?a:""}}var _default=BgFirma;exports.default=_default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,